üîπ Basic Stack Interview Questions
1. What is a stack?
A stack is a linear data structure that follows LIFO (Last-In-First-Out).

Main operations: push(), pop(), peek(), and isEmpty().

2. How to implement a stack in Java?
Using Java‚Äôs built-in Stack class:


Stack<Integer> stack = new Stack<>();
stack.push(10);
stack.pop();
stack.peek();
stack.isEmpty();
Using Array:


class Stack {
    int[] arr;
    int top;
    int capacity;

    Stack(int size) {
        arr = new int[size];
        capacity = size;
        top = -1;
    }

    void push(int x) {
        if (top == capacity - 1) throw new RuntimeException("Overflow");
        arr[++top] = x;
    }

    int pop() {
        if (top == -1) throw new RuntimeException("Underflow");
        return arr[top--];
    }

    int peek() {
        if (top == -1) throw new RuntimeException("Empty");
        return arr[top];
    }

    boolean isEmpty() {
        return top == -1;
    }
}
3. What are the applications of stack?
Expression evaluation (infix ‚Üí postfix)

Function call stack (recursion)

Backtracking (maze, paths)

Undo/Redo operations

Browser history

üîπ Intermediate Stack Interview Questions
4. Check for balanced parentheses

public boolean isValid(String s) {
    Stack<Character> stack = new Stack<>();
    for (char c : s.toCharArray()) {
        if (c == '(' || c == '[' || c == '{') stack.push(c);
        else {
            if (stack.isEmpty()) return false;
            char top = stack.pop();
            if ((c == ')' && top != '(') ||
                (c == ']' && top != '[') ||
                (c == '}' && top != '{'))
                return false;
        }
    }
    return stack.isEmpty();
}
5. Design a Stack that supports getMin() in O(1)

class MinStack {
    Stack<Integer> stack = new Stack<>();
    Stack<Integer> minStack = new Stack<>();

    public void push(int x) {
        stack.push(x);
        if (minStack.isEmpty() || x <= minStack.peek()) minStack.push(x);
    }

    public void pop() {
        if (stack.pop().equals(minStack.peek())) minStack.pop();
    }

    public int top() {
        return stack.peek();
    }

    public int getMin() {
        return minStack.peek();
    }
}
6. Implement two stacks in one array
üëâ Asked to test understanding of memory usage and custom design.

7. Evaluate postfix expression using stack


public int evalRPN(String[] tokens) {
    Stack<Integer> stack = new Stack<>();
    for (String token : tokens) {
        if ("+-*/".contains(token)) {
            int b = stack.pop();
            int a = stack.pop();
            switch (token) {
                case "+": stack.push(a + b); break;
                case "-": stack.push(a - b); break;
                case "*": stack.push(a * b); break;
                case "/": stack.push(a / b); break;
            }
        } else {
            stack.push(Integer.parseInt(token));
        }
    }
    return stack.pop();
}
üîπ Advanced Stack Questions (Amazon/Google/Meta Level)
8. Largest Rectangle in Histogram

public int largestRectangleArea(int[] heights) {
    Stack<Integer> stack = new Stack<>();
    int maxArea = 0, i = 0;
    while (i <= heights.length) {
        int h = (i == heights.length) ? 0 : heights[i];
        if (stack.isEmpty() || h >= heights[stack.peek()]) {
            stack.push(i++);
        } else {
            int height = heights[stack.pop()];
            int width = stack.isEmpty() ? i : i - stack.peek() - 1;
            maxArea = Math.max(maxArea, height * width);
        }
    }
    return maxArea;
}
9. Next Greater Element

public int[] nextGreaterElement(int[] nums) {
    Stack<Integer> stack = new Stack<>();
    int[] res = new int[nums.length];
    for (int i = nums.length - 1; i >= 0; i--) {
        while (!stack.isEmpty() && stack.peek() <= nums[i]) stack.pop();
        res[i] = stack.isEmpty() ? -1 : stack.peek();
        stack.push(nums[i]);
    }
    return res;
}
10. Daily Temperatures (Leetcode 739)

public int[] dailyTemperatures(int[] T) {
    int[] res = new int[T.length];
    Stack<Integer> stack = new Stack<>();
    for (int i = 0; i < T.length; i++) {
        while (!stack.isEmpty() && T[i] > T[stack.peek()]) {
            int prev = stack.pop();
            res[prev] = i - prev;
        }
        stack.push(i);
    }
    return res;
}
‚úÖ Tips for Interviews
Know Stack API in Java: push(), pop(), peek(), empty(), search()

Practice implementing custom stacks using array/linked list.

Focus on time and space complexity.

Understand stack behavior in recursion and DFS.

üî∏ Additional Advanced Stack Topics (Highly Useful for Interviews)
11. Reverse a Stack using recursion (without extra stack)
üëâ Asked to test recursion + stack internals

void insertAtBottom(Stack<Integer> stack, int x) {
    if (stack.isEmpty()) {
        stack.push(x);
        return;
    }
    int top = stack.pop();
    insertAtBottom(stack, x);
    stack.push(top);
}

void reverse(Stack<Integer> stack) {
    if (!stack.isEmpty()) {
        int x = stack.pop();
        reverse(stack);
        insertAtBottom(stack, x);
    }
}
12. Sort a stack using recursion (without extra stack)

void sortedInsert(Stack<Integer> stack, int x) {
    if (stack.isEmpty() || x > stack.peek()) {
        stack.push(x);
        return;
    }
    int top = stack.pop();
    sortedInsert(stack, x);
    stack.push(top);
}

void sortStack(Stack<Integer> stack) {
    if (!stack.isEmpty()) {
        int x = stack.pop();
        sortStack(stack);
        sortedInsert(stack, x);
    }
}
13. Stock Span Problem
public int[] calculateSpan(int[] price) {
    int n = price.length;
    int[] span = new int[n];
    Stack<Integer> stack = new Stack<>();
    for (int i = 0; i < n; i++) {
        while (!stack.isEmpty() && price[stack.peek()] <= price[i]) stack.pop();
        span[i] = stack.isEmpty() ? i + 1 : i - stack.peek();
        stack.push(i);
    }
    return span;
}

14. Celebrity Problem (Matrix + Stack)
Find the person who is known by everyone but knows no one.
int findCelebrity(int[][] matrix, int n) {
    Stack<Integer> stack = new Stack<>();
    for (int i = 0; i < n; i++) stack.push(i);

    while (stack.size() >= 2) {
        int a = stack.pop();
        int b = stack.pop();
        if (matrix[a][b] == 1) stack.push(b); // a knows b -> a can't be celebrity
        else stack.push(a);                  // a doesn't know b -> b can't be celebrity
    }

    int candidate = stack.pop();
    for (int i = 0; i < n; i++) {
        if (i != candidate && (matrix[candidate][i] == 1 || matrix[i][candidate] == 0))
            return -1;
    }
    return candidate;
}
15. Implement Stack using Queues / Queue using Stacks
Classic O(1) vs O(n) tradeoff logic

Java code using Queue<Integer> and Stack<Integer>

16. Maximum Area of Histogram (Variation of Largest Rectangle)
üìå Extra Concepts (Optional but Useful)
Monotonic Stack (Increasing / Decreasing)

Used in sliding window max, histogram, daily temperatures

Stack of Pairs or custom objects (for problems like min stack with frequency)

Inorder Traversal using Stack (for Binary Trees)

üîö Summary of What You Should Know
Level	Topics
‚úÖ Must Know	Stack intro, push/pop/peek, balanced brackets, reverse stack, getMin
‚≠ê Strong	Next Greater Element, postfix eval, infix‚Üípostfix, stock span
üíé Expert	Largest Rectangle, monotonic stack, sort stack recursively, celebrity problem

